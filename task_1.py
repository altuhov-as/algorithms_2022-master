"""
Задание 1.

Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.

Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""
import random
import timeit

SIZE = 1000
MIN_ITEM = -100
MAX_ITEM = 99
array = [random.randint(MIN_ITEM, MAX_ITEM) for _ in range(SIZE)]


def bubble_sort(lst):
    n = 1
    while n < len(lst):
        for i in range(len(lst) - 1 - (n - 1)):
            if lst[i] < lst[i + 1]:
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
        n += 1


def bubble_sort_upgrade(lst):
    n = 1
    while n < len(lst):
        count = 0  # счетчик были ли замены
        for i in range(len(lst) - 1 - (n - 1)):
            if lst[i] < lst[i + 1]:
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
                count += 1
        if count == 0:  # если замены не было, то прервать цикл
            break
        n += 1


print('Исходный массив:', array, sep='\t')

print(
    timeit.timeit(
        "bubble_sort(array[::])",
        globals=globals(),
        number=100
    )
)
print(
    timeit.timeit(
        "bubble_sort_upgrade(array[::])",
        globals=globals(),
        number=100
    )
)
"""
Доработка будет эффективна, в тех случаях, когда исходный массив не большой, так как больше вероятность,
что за малое количество шагов массив станет отсортированным.
Размер массива 10, время выполнения:
0.0005646010000646129
0.0004361539999990782
Размер массива 100, время выполнения:
0.038612821000015174
0.03809699700002511
Размер массива 1000, время выполнения:
3.949324231999981
4.200922752999986
"""