"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для пятого скрипта
"""
from memory_profiler import profile


@profile
def my_func(a, b, c):
    my_list = [a, b, c]
    my_list.remove(min(my_list))

    return sum(my_list)


@profile
def optimal(a, b, c):
    print(lambda arg_1, arg_2, arg_3: (arg_1 + arg_2 + arg_3) - min(arg_1, arg_2, arg_3), (a, b, c))


if __name__ == "__main__":
    my_func(8, 7, 9)
    optimal(8, 7, 9)


"""
Основы языка Python
Лекция 3. Задача 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента,
 и возвращает сумму наибольших двух аргументов.
 
Оптимизировал за счет lambda функции, не создаю список и не работаюс ним.

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     17.7 MiB     17.7 MiB           1   @profile
    37                                         def my_func(a, b, c):
    38     17.7 MiB      0.0 MiB           1       my_list = [a, b, c]
    39     17.7 MiB      0.0 MiB           1       my_list.remove(min(my_list))
    40                                         
    41     17.7 MiB      0.0 MiB           1       return sum(my_list)
    
    44     17.3 MiB     17.3 MiB           1   @profile
    45                                         def optimal(a, b, c):
    46     17.3 MiB      0.0 MiB           1       print(lambda arg_1, arg_2, arg_3: (arg_1 + arg_2 + arg_3) - min(arg_1, arg_2, arg_3), (a, b, c))

"""