"""
Задание 2.

Попытайтесь выполнить профилирование памяти в любом скрипте с рекурсией.

Вам нужно обнаружить проблему в процессе этого. Но проблема связана не с тем,
что рекурсия потребляет много памяти, а с самим процессом замеров.

Опищите эту проблему и найдите простой путь ее решения.
Опишите этот путь и покажите его применение
"""
from memory_profiler import memory_usage


def decor(func):
    def wrapper(*args, **kwargs):
        mem_1 = memory_usage()
        res = func(args[0])
        mem_2 = memory_usage()
        mem_diff = mem_2[0] - mem_1[0]
        return mem_diff
    return wrapper


@decor
def my_reverse(number):
    if number == 0:
        return ""
    return "{0}{1}".format(str(number % 10), my_reverse(number // 10))


@decor
def my_slice(number):
    return str(number)[::-1]


my_numb = 123456789876543212345678987654321234567890


if __name__ == "__main__":
    mem_diff = my_reverse(my_numb)
    print(f"Выполнение заняло {mem_diff} Mib")
    mem_diff = my_slice(my_numb)
    print(f"Выполнение заняло {mem_diff} Mib")


"""
Алгоритмы и структуры данных на Python. Базовый курс
Задание перевернуть число
Срез будет эффективнее


Рекурсивная функция ничем не отличается от любой другой функции — автоматические локальные переменные распределяются как
один блок, перемещая указатель стека на достаточно большое расстояние, чтобы учесть сумму их размеров 
(плюс любые отступы, необходимые для выравнивания).

Каждый рекурсивный вызов таким образом добавляет новый кадр стека, а затем возвращает его, когда возвращается. Если 
рекурсия не достигает базового случая, стек будет быстро исчерпан, что приведет к одноименной аварии переполнения стека.    
"""