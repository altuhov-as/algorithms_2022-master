"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для третьего скрипта
"""
from memory_profiler import profile
from functools import reduce


def my_func(prev_el, el):
    # prev_el - предыдущий элемент
    # el - текущий элемент
    return prev_el * el


@profile
def preview():
    my_list = [i for i in range(100, 1001, 2)]
    print(reduce(my_func, my_list))


@profile
def optim():
    print(reduce(lambda a, b: a * b, [x for x in range(100, 1001, 2)]))


if __name__ == "__main__":
    preview()
    optim()

"""
Основы языка Python
Лекция 4. Задача 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления
произведения всех элементов списка.
Подсказка: использовать функцию reduce().

Оптимизировал использование функции, за счет lambda

    44     17.3 MiB     17.3 MiB           1   @profile
    45                                         def preview():
    46     17.3 MiB      0.0 MiB         454       my_list = [i for i in range(100, 1001, 2)]
    47     17.6 MiB      0.3 MiB           1       print(reduce(my_func, my_list))
    
    Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    49     17.3 MiB     17.3 MiB           1   @profile
    50                                         def optim():
    51     17.3 MiB      0.0 MiB        1354       print(reduce(lambda a, b: a * b, [x for x in range(100, 1001, 2)]))
"""