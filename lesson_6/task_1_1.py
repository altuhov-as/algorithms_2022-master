"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""
from pympler import asizeof


class MyHex:
    _line = ''

    def __init__(self, num: str):
        self._line = num

    def __mul__(self, other):
        if isinstance(other, MyHex):
            return list(f'{int(self._line, 16) * int(other._line, 16):X}')
        return False

    def __add__(self, other):
        if isinstance(other, MyHex):
            return list(f'{int(self._line, 16) + int(other._line, 16):X}')
        return False


class MyHexOptim:
    __slots__ = ['_line']

    def __init__(self, num: str):
        self._line = num

    def __mul__(self, other):
        if isinstance(other, MyHex):
            return list(f'{int(self._line, 16) * int(other._line, 16):X}')
        return False

    def __add__(self, other):
        if isinstance(other, MyHex):
            return list(f'{int(self._line, 16) + int(other._line, 16):X}')
        return False


if __name__ == "__main__":
    first = MyHex("A2")
    print(asizeof.asizeof((first)))
    second = MyHexOptim("A2")
    print(asizeof.asizeof((second)))

"""
Урок 5. Практическое задание. Задание 2. Решение через ООП
Использование слотов позволяет сохранить атрибуты в менее затратном по памяти контейнере – списке, кортеже. 
При этом список атрибутов строго ограничен. Мы не можете добавить новые атрибуты динамически.
"""
